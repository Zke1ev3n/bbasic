第一章：简介


--------------------------------------------------------------------------------

一、BB的由来

    BB是BBK BASIC的简称，是可以开发BBK电子词典程序的一种语言。这个语言采用Quick Basic的语法，方便朋友们开发程序。目前的编译器和连接器版本是1.5，大部分的功能已经支持，基本可以满足用户朋友开发程序的需要。

    和QB相比较，BB大部分的语法和函数是一样的，当然也有不同的地方。详细的区别和练习。我们将在后面的文章中详细阐述。有QB编程经验的朋友使用BB将非常容易上手。BASIC是自学编程的最好语言，基本每个自学编程的高手，都有过学习BASIC的经历。因为BASIC本身具有高级语言的基本特性，比如：结构化程序设计，但有很简单。可以让初学编程的朋友把主要的精力放在对编程思想的领悟上，而不用过多的去关注所用语言本身的细节。

    由于我们的词典用户，多数都是未接触过编程的学生朋友，为了很好的锻炼大家的逻辑思维能力，可以让大家能轻松体会编程的乐趣，我们公司组织专人开发了BBK BASIC这种可以开发在词典上运行的程序的编程语言。这个语言的后继版本将会推出可以在词典机上编程的版本，目前还必须在电脑上编程，生成的最终.BIN文件可以在词典机上运行。

    目前已经支持的机型是9188/9288/9288T。其他机型的虚拟机将在后期提供。

　

二、BB的构成

    目前BB还没集成的IDE开发环境。

    开发环境是由编译器、连接器和基本库构成的。词典机的运行环境就很简单了，只需要一个BB虚拟机。

    程序文件的编写可以使用任意的文本编辑器，例如：windows自带的记事本等。

　

    编译器：BBasic.exe

    你所写的BB程序需要经过这个可执行程序编译成虚拟机的汇编代码，汇编代码是以和你程序文件同名的.obj文件存放的。你所写的BB源程序可以以任何扩展名存放，标准的是.bas。

    编译器的用法：BBasic.exe + 源程序文件

    例如：你的源程序叫yzdel.bas，那么编译它的命令行为

    BBasic.exe yzdel.bas

        |          |

        |          ――――――――源程序文件

        ――――――――――――――编译器

    编译后生成的目标文件是yzdel.obj

    编译器有几个编译选项，下面分别介绍一下：

    -opt:优化编译选项。将会优化你所写的程序，使程序的效率更高，容量更小。Ver1.4以后的编译器都支持本选项。

    -r:反字节选项。这个选项的提供，是由于9188机型本身的一个问题，所以这个选项也只用在编译9188程序时。

    -hr:保留注释代码选项。主要用来对比优化是否正确的。普通用户用不到这个选项，可以看懂BB汇编的用户可以

        用这个选项查查看是否由于优化造成了你程序错误。

    -nc:不连接公共段选项。这个选项任何人都禁止使用。主要用途是我用来调试单行代码生成的。    

　

    连接器：Blink.exe

    编译后的.obj文件需要经过连接器连接成.bin文件才能最终被虚拟机解释执行。

    连接器的用法：Blink.exe + objfile + binfile

    例如：连接上面被编译的文件yzdel.obj成为可执行文件的命令行为

    Blink.exe yzdel.obj 勇者斗恶龙.bin

        |        |            |

        |        |            ――――被连接成的目标文件

        |        ―――――――――――被连接的OBJ文件，由编译器生成

        ――――――――――――――――连接器

    连接后的目标文件为.bin文件才可以被虚拟机识别

    连接器的连接选项如下：

    -r:反字节选项。这个选项的提供，是由于9188机型本身的一个问题，所以这个选项也只用在编译9188程序时。

　

    基本库：StdLib.fls和StdLib.lib

    StdLib.lib是基本库的索引文件，StdLib.lib是基本库的代码文件。

    

虚拟机：BB虚拟机.exe

用在词典机上的虚拟机，可执行由连接器生成的.bin文件。

　

三、BB的模拟器运行

为了方便程序在电脑上调试，我们提供了一个模拟器环境，模拟器的界面如下：

        

    为了模拟屏幕大小不同的机型，模拟器窗口的大小是可以通过函数SETLCD(WID,HGT)来设置的。初始的大小是320×240的，所以若你开发的程序是9188/9288使用的话，就不需要重新设置模拟器的大小了。若你开发的机型是9288T的，就需要调用SETLCD(240,160)，将模拟器窗口设置为9288T的屏幕大小。

    模拟器目前还是固定执行sim\BBasic目录下的test.bin，因此要使你开发的程序可以在模拟上被执行，就必须将你生成的.bin文件copy到sim\BBasic下，并将文件名改成test.bin。

    模拟器目前查找资源文件也是固定在sim\debug目录下进行的，所以若你的程序使用了资源文件，请将资源文件copy到该目录下。

    完成了以上所有的动作后，即可通过调用sim\debug目录下的GamDev.exe来启动模拟器。

　

四、BB的词典机运行

    BB的词典机环境，主要由对应机型的BB虚拟机.exe和对应机型的BBLoGo.bbs两个文件组成。

    BB虚拟机.exe是BB程序可以在词典机上运行的关键程序。

    BBLoGo.bbs是BB开头的那个图片，如下图所示：

        

    想让你的BB程序在词典机上运行？只要将你的.bin文件copy到词典上的“系统\程序\目录”下，和BB虚拟机.exe文件放在同一个目录下，就OK了。很简单吧。^_^




第二章：基础知识


--------------------------------------------------------------------------------

一、数据类型

    BB中支持整型(默认类型)、单精度浮点数和字符串三种数据类型。

    整型：整型数和数学中的整数是一个概念，不过在计算机中整型数会根据各编译器的差异，而可表示的范围不同。数学中的整数可以是[-∞,+∞]中的任意整数，在BB中，整型数的是在[-2147483648,+2147483647]中的任意整数。

    例如：1，－10，9等

    单精度浮点型：可以理解成数学中的小数。当然概念是不完全等同的，但在写普通的程序时，不需要太深入的区分它们。在普通的程序中，你看到的小数，都可认为时浮点数。单精度浮点数的取值范围是 正值[+1.40129E-45，3.402823E+38] 负值[-3.402823E+38,-1.40129E-45]。

    例如：1.05，3.1415926等

    字符串：指在一对双引号之间的若干各字符集合。BB中的字符串最大长度是没有限制的，它只会受到你的程序所处环境的物理内存的影响。

    例如："hello world."，"中华人民共和国"等

　

二、常量和变量

    通俗的讲，常量就是在程序运行中不可改变的量；变量是用来存放数据的空间，因此在程序运行中，是可以随时根据需要改变其值的量。举个例子，变量就好比是一个礼品盒，你给朋友送礼物时，可以在这个盒子中放任何你想放的东西，而常量就好比是你放在礼品盒中的礼物，它是不会改变的。当你收到一个礼品盒时，它对你来说，就是一个变量，因为它里面可能放的是任何东西。而当你收到朋友送你的一本书时，这本书就是常量。

    对于程序中的变量来说，有个当前值的概念，就是程序运行到某一时刻，变量的值。这就好比你这次用这个礼品盒包了个苹果给你的朋友，那这个苹果就是礼品盒的当前值。

    在程序中，你所看到的整数，小数，字符串，都是常量。而变量是由特定的命名规则形成的符号串。对应的，程序中的常量和变量也是有3种类型，分别是整型、单精度浮点数和字符串。

    常量例如：10,1.25，"I love BB."等。

    变量例如：g_Variable

　

    程序中变量实际是内存地址的名字，变量有特定的命名规则：

    1、变量名是以字母开头，可用A～Z，0～9，下划线等组成的字符序列。例如g_Variable，i，name3等

    2、序列长度不超过100个。

    3、不允许使用关键字做变量名。如函数、语句等。

    

    变量的定义：

    目前BB还不支持使用AS定义变量类型，只能使用如下的方法定义。

    Dim g_Life%                   定义整型变量g_Life%    （等价与Dim g_Life）

    Dim g_Name$                   定义字符串变量g_Name$

    Dim g_Modulus!                定义单精度浮点数变量g_Modulus!

　

三、算术运算

    在数学中，我们有代数式，有各种运算，将这些概念引进到BB中，就成为算术运算符和算术表达式。

    1、算术运算符

    在BB中，我们只支持了+(加),-(减，取负),*(乘),/(除),MOD(模运算)5种运算符。

    MOD是模运算即取余运算。

    BB种的运算没有类型自动转换，请各位自己先进行类型匹配。

    2、算术表达式

    用算术运算符和括号将常量，变量及函数连接起来的式子称为算术表达式。

    例如：3*X+X-2

    3、字符串表达式

    用字符串连接符（亦称串加值运算符）将字符串常量，字符串变量连接起来的式子称为字符串表达式。

    例如："BEIJING" + "2008"

　

四、程序构成

   先看个例子：

    'CIRCLE.BAS

    'CALCULATING THE CIRCLE'S AREA AND THE LENGTH OF CIRCUMFERENCE.

    Const PI = 3.14159

    Dim r!,s!

    Dim area!

    Input "ENTER THE CIRCLE'S RADIUS:";r!

    area = PI * r! * r!

    s =  2 * PI * r!

    Print "AREA = ";area!,"CIRCUMFERENCE = ";s

    End

   一个完整的程序程序包括:

    (1)、注释

    (2)、数据说明        

    (3)、数据输入

    (4)、数据处理

    (5)、结果输出

　

    1、注释

    语法：' 注释内容

    作用：在程序中加入解释性的说明，可提高程序的可读性，方便自己修改BUG或别人阅读你的代码。

              注释可单独成行，也可放到其他行后。编译器遇到注释不做任何处理，直接略去。

    2、数据说明

    语法：DIM 变量名（不支持AS）

    作用：告诉编译器变量的数据类型，方便它进行不同的处理。

    3、数据输入

    详细的数据输入，在第三章的数据输入一节中会详细讲，这里不再重复。数据输入是给程序提供所需要的原始数据。

    4、数据处理

    对于输入的数据，根据问题的需要进行相应的处理，上例中，则是根据输入的圆的半径求圆的面积和周长。

    5、结果输出

    将程序计算得到的结果显示出来。

五、行标识符

    行标识符（简称行标识）有行号和标识符两种形式。设置行标识的目的是标明转移之目标。

    行号由1～40个数字组成，后面不必跟冒号。

    标识符由1～40个字母或数字组成，必须以字母开头，并以冒号结束。

    例如：

    500    print "500是个行号"

    GAMEOVER:    End        'GAMEOVER是个标识符




第三章：I/O语句


--------------------------------------------------------------------------------

    I/O语句即input/output语句，是站在计算机的角度看的输入输出操作语句。从计算机内将数据送到计算机外部设备叫“输出”；从计算机外部设备将数据送入计算机叫“输出”。

一、数据输出

    输出语句用来将需要显示/保存的数据，向显示器、打印机或磁盘文件输出，供用户查看或保存。

    1、屏幕显示语句(PRINT)

    功能：在屏幕上显示数据

    语法：PRINT [表达式1],[表达式2]...

    说明：

        <1>.表达式可以为一个，也可以为多个。同一个PRINT语句的各表达式之间可用分割符号(逗号,分号)隔开。

        <2>.表达式可以是字符串，也可以是数值。若无表达式则输入空行。

        <3>.使用逗号分割的表达式之间插入4个空格；使用分号风格的表达式之间无任何插入。

        <4>.BB中的PRINT语句不具备计算功能。因此，只可以输出常量或变量的值。

    例如：PRINT "A的当前值为：";A

    2、打印输出语句(LPRINT)

        BB不支持这个语句，这里不做介绍。

    3、WRITE语句

        BB不支持这个语句，这里不做介绍。

　

二、数据输入

    输入语句是给程序提供需要处理的数据的。

    1、赋值语句

    功能：将一个数据赋给变量

    语法：变量 ＝ 表达式

    说明：

        <1>.QB中可以在赋值语句前使用LET，但基本所有的程序员都不使用这个关键字，所以BB中没有支持此关键字。

        <2>.赋值语句中的“＝”，叫做赋值号。

        <3>.赋值号左边只能是变量，而不能是常量或表达式。因为我们知道，只有变量才是一个礼品盒，也只有礼品

            盒才能用来包裹不同的东西（被赋值）。

        <4>.赋值语句有运算功能，因此赋值号右边可以是表达式

        <5>.一个赋值语句只能给一个变量赋值。

        例如：level = 99

              city = "北京"

2、键盘输入语句(INPUT)

功能：程序执行时从键盘输入数据

语法：INPUT "输入提示字语";变量列表

说明：BB中INPUT语句没做相应的数据类型检查。所以输入数据的类型和个数请在输入提示语中明确指出。

      防止用户输入错误的数据。

    例如：input "请输入你的年龄：";age

3、行输入语句(LINE INPUT)

    BB不支持这个语句，这里不做介绍。

4、读数置数语句(READ/DATA)

功能：从DATA语句给出的数据中读取数据。

语法：READ 变量1,变量2,...变量N

        .

        .

        .

      DATA 数据1,数据2,...数据N

说明：

    <1>.READ和DATA语句必须成对出现，但可以分开放。

    <2>.DATA语句中的数据类型必须和READ语句中的变量类型一一对应。

    <3>.READ语句中的变量个数不得多于DATA语句中的数据个数。

    例如：

        Dim name$,score

        READ name$,score

        PRINT name$,score

        READ name$,score

        PRINT name$,score

        DATA "张三",89

        DATA "李四",56

        End

5、恢复读数据语句(RESTORE)

功能：从指定的DATA语句行重新读入数据。

语法：RESTORE [行标号]

说明：

    <1>.RESTORE语句与READ-DATA语句配合使用，用于把“数据指针”恢复到指定的位置。

    <2>.若RESTORE语句没有指定行号或行标号，则把数据指针恢复到第一个DATA语句中的第一个数据项。

　

三、键盘相关函数

    1、KEYPRESS

    功能：检测指定键的状态，若指定键按下返回1，否则返回0

    语法：KEYPRESS(KEYCODE)

    说明：

        该函数检测到指定键的状态后立即返回，程序不会在函数内部停留等待。指定的KEYCODE是ASCII码。

    例如：

        '检测 A 是否按下

        IF KEYPRESS(&h41) TEHN

            PRINT "A 被按下"

        ELSE

            PRINT "A 未被按下"

        END IF

        '其中，&h41是A的ASCII

    2、WAITKEY

    功能：等待并返回一个按键的键值。

    语法：WAITKEY()

    说明：

        该程序进入函数后，若没有按键按下，程序会一直在这个函数中等待，直到有按键按下才将被按下的键值返回。

　

四、屏幕操作语句

    1、CLS语句

    功能：清空屏幕

    语法：CLS [0|1|2]

    说明：

        CLS后边所的带的数字，目前BB不做区分，都只执行一个功能。清空整个屏幕，并将输出光标定在(0,0)

    2、LOCATE函数

    功能：移动屏幕输出光标到指定位置。

    语法：LOCATE(行,列)

    说明：

        <1>.QB中LOCATE是语句，在BB中以函数实现了。所以调用时，有部分差异。

            LOCATE(0,0)            'BB中的调用

            LOCATE 0,0             'QB中的调用

        <2>.行列的计算方法是根据当前被设置的字体(BB中可通过FONT函数设置)的字符宽度和高度来计算的。

            例如：当前被设置的字体是12×12的宋体字，则对应行列的象素坐标是：

                    行象素坐标 ＝ 行 × 12

                    列象素坐标 ＝ 列 × 6

    3、PIXLOCATE函数

    功能：移动屏幕输出光标到指定位置(象素坐标)

    语法：PIXLOCATE(x,y)

    说明：

        <1>.本函数是QB没有而在BB中增加的。可以精确定位你的屏幕输出位置。

        <2>.参数x,y就是你要将屏幕输出光标定位到的象素坐标位置。

        <3>.注意，这个函数的参数顺序是和LOCATE不同的，LOCATE是先行坐标即Y坐标，而这个函数是先X坐标。

    4、FONT函数

    功能：设置当前的显示字体

    语法：FONT(字体代号)

    说明：

        <1>.本函数是QB没有而在BB中增加的。可以丰富你的屏幕显示效果。

        <2>.字体代号可以是：FONT_12SONG，FONT_12KAI，FONT_12HEI，FONT_16SONG，FONT_16KAI，FONT_16HEI，FONT_24SONG，FONT_24KAI，FONT_24HEI九种字体中的一种。以上9种字体实际只有宋体，楷体和黑体三种，而每种字体又分为12×12，16×16，24×24三种尺寸。

        <3>.通过本函数设置字体后，会影响LOCATE函数的行列坐标计算。即不同的字体，使用相同的LOCATE参数，显示的内容也不一定是在相同的屏幕位置。

　




第四章：分支结构


--------------------------------------------------------------------------------

    程序按照程序行的顺序执行，这种结构称为顺序结构。而有些问题需要根据调教的不同，执行不同的代码，这种结构称为分支结构。

一、块IF语句

    功能：根据条件又选择的执行程序。

    语法：

        IF 条件 THEN

            语句块1

        ELSE

            语句块2

        END IF

    说明：

        <1>.IF THEN ELSE END IF为关键字。执行时，计算机首先判断条件是否为真，若为真则执行语句块1，否则执行语句块2。执行完后程序跳转到END IF的下一条语句执行。

        <2>.语句块是以段程序，可以包含一条或多条语句。

        <3>.上面的写法中，语句块1和语句块2比IF ELSE END IF靠右，这叫程序的缩排。这种格式右利于程序的可阅读性。

    例如：

        DIM a

        Input "请输入A",a

        IF a > 0 THEN

            print "a > 0"

        ELSE

            print "a <= 0"

        END IF

　

二、块IF语句的变形

   1、省略ELSE语句

    功能：确定语句块是否执行

    语法：

        IF 条件 THEN

            语句块

        END IF

    说明：

        执行时，计算首先判断条件是否为真。若为真，则执行语句块；否则，直接跳转到END IF后的语句执行。

    例如：

        DIM a

        Input "请输入A",a

        IF a = 0 THEN

            print "a = 0"

        END IF

    2、增加ELSE IF语句

    功能：提供多种选择

    语法：

        IF 条件1 THEN

            语句块1

        ELSE IF 条件2 THEN

            语句块2

        ELSE IF 条件3 THEN

            语句块3

            .

            .

            .

        ELSE

            语句块N

        END IF

    说明：

        <1>.IF THEN END IF为必须项，其他为可选项。

        <2>.执行时，计算机首先判断条件1是否成立，若成立，则执行语句块1；否则判断条件2是否成立，若成立，则执行语句块2；否则继续判断下一个条件，如果为真，则执行相应的语句块；若所有条件都为假，则执行ELSE下面的语句块N。执行完对应的语句块后，跳转到END IF后的语句继续执行。

        例如：

        DIM a

        Input "请输入A",a

        IF a > 0 THEN

            print "a > 0"

        ELSE IF a = 0 THEN

            print "a = 0"

        ELSE

            print "a < 0"

        END IF

　

三、关系表达式和逻辑表达式

    在块IF语句中，我们使用了“条件”来作为判断标准。那么，条件都会由哪些东西构成呢?下面介绍几个基础知识。

    1、逻辑量

        逻辑量又叫布尔量，它只又两种值，“真”和“假”。

    2、关系运算符

        其实就是日常生活中的比较运算。在BB中，有如下几种符号：

        符号        意义        等同的数学符号        例子

        >           大于            >                5 > 3

        <           小于            <                3 < 5

        =           等于            =                1 = 1

        >=          大于等于        ≥               4 >= 4

        <=          小于等于        ≤               4 <= 4

        <>          不等于          ≠               1 <> 2

    3、关系表达式

        用关系运算符将两个算术表达式串联起来的式子，叫关系表达式。关系表达式的值为逻辑值。

        例如：上面的例子中的关系表达式的值都为“真”。

    4、逻辑运算符

        逻辑运算符有：AND(逻辑与)，OR(逻辑或)，NOT(逻辑非)；XOR(异或)等。BB只支持与或非三中逻辑关系运算。

        NOT在程序中出现时，你可以理解为“”

        具体意义，看下面。

    5、逻辑表达式

        用逻辑运算符连接关系表达式构成的式子，叫逻辑表达式。逻辑表达式的指为逻辑值。

            例如：5 > 3 OR 1 = 1

　

        AND(逻辑与)表达的意义是，当用AND连接的前后两个关系表达式都为真时，这个逻辑表达式的值才为真；其中有一个关系表达式的值为假的话，这个逻辑表达式的值就为假。AND在程序中出现时，你可以理解为“并且”。

            例如：5 > 3 AND 1 = 1的值为真，而5 > 3 AND 1 < 1的值为假。

            按照我说的理解方法：

            5 > 3 AND 1 = 1是这样理解的：5大于3并且1等于1，这句话本来就是对的。所以为真。

            而

            5 > 3 AND 1 < 1是这样理解的：5大于3并且1小于1，这句话本来就是错的。所以为假。

　

        OR(逻辑或)表达的意义是，当用OR连接的前后两个关系表达式中有一个为真，这个逻辑表达式的值就为真。只有当两个关系表达式都为假时，这个逻辑表达式的值才为假。OR在程序中出现时，你可以理解为“或者”。

            例如：5 > 3 OR 1 < 0 的值为真，而5 < 3 OR 1 < 0 的值为假。

            按照我说的理解方法：

            5 > 3 OR 1 < 0是这样理解的：5大于3或者1<0，感觉这句话是对的吗?当然是对的。因为5确实大于3嘛。

            而

            5 < 3 OR 1 < 0是这样理解的：5小于3或者1小于0。呵呵，明显是错的。所以为假。

　

        NOT(逻辑非)表达的意义是，当用NOT修饰一个关系表达式时，这个关系表达式的值和它本来的刚好相反。当NOT在程序中出现时，可以对它后面的关系表达式中的关系运算符加个不来理解。

            例如：NOT 5 > 3的值为假，因为5>3为真，使用NOT修饰后，取它的反值，就称假了。

            按照我说的理解方法：

            NOT 5 > 3是这样理解的：5不大于3，这里给后边的>关系运算符加个不，就是不大于。感觉如何呢？

　

四、块IF语句的嵌套

    在一个块IF语句中包含另一个块IF语句，称为块IF语句的嵌套。嵌套可以是多重的。即在一个块IF语句中嵌套另一个块IF，而在另一个块IF中，又可以嵌套其他的块IF。

    但需要注意的是，嵌套必须完全包住，不能出现相互骑跨。

    块IF语句嵌套的标准格式如下：

        IF 条件1 THEN

            语句块1

            IF 条件11 THEN

                语句块11

            ELSE

                语句块12

            END IF

        ELSE

            语句块2

            IF 条件21 THEN

                语句块21

            ELSE

                语句块22

            END IF

        END IF

    例如：

        DIM a

        Input "请输入A",a

        IF a = 0 THEN

            print "a = 0"

        ELSE

            IF a > 0 THEN

                print "a > 0"

            ELSE IF a < 0 THEN

                print "a < 0"

            END IF

        END IF

　

五、无条件跳转语句GOTO

    功能：改变程序执行的顺序，无条件转移到语句标号所指定的程序行。

    语法：GOTO 语句标号

    说明：

        在现代程序设计中，要求限制GOTO语句的使用，因为它不符合结构化程序设计的原则。尽量不要使用它。




第五章：循环结构


--------------------------------------------------------------------------------

    在程序设计中，经常会遇到一些有规律的重复多次的计算问题。例如：求从1加到100的和。若采用顺序结构编程，语句重复性大，程序显得的繁琐、冗长。循环结构的引入能有效的实现重复计算的编程问题。

    在QB中支持FOR～NEXT；WHILE～WEND；DO～LOOP三种循环结构，但在实际编程中，这三种结构又是互通可以相互转化的。所以BB中目前只支持了WHILE～WEND结构。另外两种循环结构目前还未支持。

一、WHILE～WEND

    功能：依据给定的条件执行循环

    语法：WHILE 逻辑表达式

            语句块

          WEND

    说明：

        当逻辑表达式为真时，执行循环体中的语句块。因此，在循环体内，一定要对逻辑表达式重新赋值，否则就是

        无穷循环，也叫死循环。

    例字：求从1加到100的和。

        DIM i,sum

        i = 1

        sum = 0

        While i < 101

            sum = sum + i

            i = i + 1

        Wend

        print "sum = ";sum

　

二、多重循环

    与分支结构类似，循环也可以嵌套。在程序设计中，循环的嵌套时经常使用的一种结构。作为循环，按结构化程序设计的原则，要求循环具有单入口，单出口。所谓单入口单出口，是指循环必须从循环的起始语句开始执行，然后正常结束。

    在循环语句的循环体内包含另一个循环语句，这就是多重循环。多重循环也称为循环嵌套。在多层循环中，外面的大循环叫外循环，里面的小循环叫内循环。

    例如：计算乘法口诀表

    DIM I,J,AMA

    I = 1

    WHILE I < 10

        J = I

        WHILE J < 10

            AMA = I * J

            LOCATE(I,J*3)

            PRINT AMA

            J = J + 1

        WEND

        I = I + 1

    WEND



第六章：字符串


--------------------------------------------------------------------------------

    程序设计中，经常会遇到要处理非数值的情况，比如：文本记事、人事管理，图书检索等。这些需求，程序处理的对象都是非数值的字符串。

    字符串的定义和字符串变量的定义方法，前面都已经给出了。这里不在赘述。

　

一、字符串的比较

    两个数值可以进行比较，比如：5>3，同样两个字符串也可以进行比较。

    在BB中的字符串比较规则，是和QB一样的。字符的大小比较，是对其在计算机内部的ASCII码值进行比较。而字符串的比较，是在字符比较的基础上进行定义的。如下：

    字符串的比较，是从各自的第一个字符开始，逐个字符进行比较，如果所有的字符完全相同，则这两个字符串就相等。如果出现了不同的字符，就以这两个不同的字符的大小，决定字符串的大小。

    例如："THE" > "THAT"        "LAGLE" > "LANGE"

    说明：

        1、若两个字符串相应的字符都相同，而其中一字符串长一些，则以长者为大。

        2、空格也是字符，所以也参与比较，并且它是最小的可显示ASCII。所以，" Z" < "A"

　

二、字符串函数

    这部分函数尚未提供，以后有需求再提供并写相关的说明




第七章：数组


--------------------------------------------------------------------------------

    数组，是一组具有相同类型的变量集合。该组变量具有相同的名称，但有不同的下标。他们总是成批出现，彼此之间保持着一定的顺序，需要进行相同的处理。

　

一、数组变量的定义

    一维数组变量的定义和普通变量定义基本相同，唯一不同的是，定义数组变量时，需要在变量后边加上括号，并在括号内指定数组元素的个数。

    例如：DIM g_Single%    定义单个整型变量        DIM g_Array%(10)    定义10个整型元素的数组变量

          DIM g_Single!    定义单个单精度变量      DIM g_Array!(10)    定义10个单精度浮点数元素的数组变量

          DIM g_Single$    定义单个字符串变量      DIM g_Array$(10)    定义10个字符串元素的数组变量

    多维数组变量的定义和一维的定义类似，只是有几维就在变量名后边加几个括号，并指明该维的元素个数。

    例如：DIM g_Array%(10)(10)    定义一个10×10的整型二维数组。

          DIM g_Array%(2)(10)(10)    定义一个2×10×10的整型三维数组。

    注意：在BB中和QB不同，数组定义时，不允许在括号中使用"TO"来指定数组维的上下界。由于在BB中还没提供OPTION BASE语句，所以BB中的数组的下界都是从0开始的。

　

二、数组相关函数

    目前尚未提供。




第八章：过程


--------------------------------------------------------------------------------

    过程是指可以根据所给参数（或无参数），可以完成指定功能的一段可被重复调用的一段代码块。在BB中和QB相同，过程分为自定义函数(FUNCTION)和子程序(SUB)两种类型。

一、函数(子程序)声明语句 DECLARE

    功能：说明引用的过程和调用过程时传递的参数。

    语法：DECLEAR {FUNCTION|SUB} 过程名(参数表)

    说明：

        1、过程名的命名规则和变量名规则完全相同。

        2、参数表用来说明模块和过程间传递的参数及其类型。形式和变量名相同。

        3、目前BB只支持简单变量作为参数传递，不可以传递数组变量。

    例如：DECLARE FUNCTION TestApp()        '空参数过程

          DECLARE SUB TestApp()             '空参数子程序

          DECLARE FUNCTION TestApp(param)   '整型参数过程

          DECLARE SUB TestApp(param)        '整型参数子程序

        其他情况和上面的类似。    

　

二、FUNCTION 语句

    功能：定义一个FUNCTION 函数过程。

    语法：

        FUNCTION 函数名(参数表)

            过程体

            函数名 = 返回值(可以为表达式)

        END FUNCTION

    说明：

        1、函数名 = 返回值(可以为表达式)是为函数设置返回值的，可以通过这一句，让函数返回一个值或一个字符串。

        2、在BB中目前还不支持EXIT FUNCTION 语句。

        3、可以递归，即自己调用自己。

    例如：求从1加到10的和。使用函数的递归来实现。

        Function DAdd(p)
            Dim psum
            If p > 1 Then
                psum = p + DAdd(p - 1)
            Else
                psum = psum + p
            End If
            DAdd = psum
        End Function

        Dim isum

        isum = DAdd(10)
        Print isum

    注意，在例子中，由于函数DAdd的实现放在了调用它的前面，故不用使用DECLEAR语句声明该函数。若函数体放在调用的后面，就必须使用DECLEAR加以声明，才可以编译通过。

　

三、SUB 语句

    在QB中SUB和FUCNTION是有区别的。除了SUB不能返回值外，调用方式也不同。在BB中SUB和FUNCTION是完全相同的。相同到的程度是，编译器认为在程序中的SUB关键字，就是FUNCTION。

    所以，在BB中只有FUCNTION,没有SUB，所以大家都尽量使用FUNCTION吧。^_^

　

四、参数传递类型

    参数的传递类型分为传值和传址。

    传值：将变量的值传给相应的函数参数。其实际的过程是，将要传递的变量的值赋给一个临时内存单元。这个临时单元只在函数的内部有效。当函数退出后，该内存单元将无效。

    传址：我们在讲解变量的定义时，已经说过，变量是内存地址的名称。所以给函数传递参数时，可以把一个变量的地址传递给函数，这样，在函数中对这个地址中的值的改变，就可以在函数退出后依然有效。

    关于函数参数的详细传递过程，我们这里就不详细介绍了。

    在BB中目前只支持传值这个传递类型。所以，函数唯一可以返回数值的显性方式就只有函数的返回值这一条路了。当然，你也可以使用全局变量进行返回，不过这种方式不明显。

　

五、全局变量、局部变量和共享变量

    全局变量：在整个程序中，只要变量的名称相同，计算机就认为它是同一个变量。这种变量的定义位置，都是在函数的外边。因为在函数中改变了全局变量的值，它在程序的外部依然有效，所以，为了区分其他类型变量，全局变量都用“g_”开头。这样的好处是，一看变量名，就能知道这个变量是不是全局变量。

    局部变量：只在一个局部的区域内有效的变量。这个区域一般是函数中。这种变量的定义位置，都是在函数内部。当一个局部变量和一个全局变量重名后，在程序中对该名字的变量的操作，实际是对全局变量的操作。这也就是为什么大家尽量给全局变量加个“g_”的头。

    共享变量：在定义局部变量时，若使用了SHARED关键字，这个局部变量就叫做共享变量。定义方式类似 DIM SHARED lp 这里的lp就是共享变量。共享变量很容易引起混淆，特别是当共享变量名和别的变量名重名时。所以BB中并不推荐大家使用共享变量。不过，由于在BB中共享变量的处理方式，是和全局变量类似的，对共享变量的处理速度，会比局部变量快，所以，可以使用共享变量提高速度。




第九章：文件系统


--------------------------------------------------------------------------------

    文件是程序将数据保存的有效途径。当程序退出后，下次进入该程序还想使用以前的数据，一般都是通过使用文件来保存数据的。典型而普遍的一个例子，就是游戏的存档。大家在玩游戏时，都希望在退出游戏时能保存自己的数据，以便以后再玩时，读取以前的游戏状态。这个游戏数据的保存，一般都是通过文件来进行的。

　

一、文件类型

    BASIC中支持的文件类型有顺序文件、随机文件和二进制文件三种方式。在BB中只支持二进制文件类型。关于各文件类型的特点以及其他详细情况，我这里就不详细讲了。大家有兴趣，可以去查QUICK BASIC的相关教程。我在这里结合文件的相关函数，重点讲一下在BB中如何操作一个二进制文件。

　

二、文件操作语句

   1、OPEN

    功能：打开一个待操作的文件

    语法：OPEN 文件名 FOR BINARY AS #文件号

    说明：

        <1>、OPEN是打开文件的关键字。

        <2>、文件名是要打开的文件。

        <3>、FOR BINARY是将文件以二进制方式打开。由于BB只支持二进制，这里打开其他类型的文件不在赘叙。

        <4>、AS #文件号，是指定打开的文件所占据的文件号，后边对这个文件的操作都是通过操作这个文件号进行的。

    例如：OPEN "hszj.sav" FOR BIANRY AS #1

        这句是出现在《幻兽战记》代码中的一行代码，意思是使用1号通道，打开幻兽战记的存盘文件"hszj.sav"，以便对其进行操作。

    2、CLOSE

    功能：关闭一个已经打开的文件

    语法：CLOSE #文件号

    说明：

        CLOSE语句后面的文件号，就是在OPEN语句中，指定的文件号。所有的文件，在对其操作完毕后，都要使用CLOSE语句来关闭它。QB中支持使用不带文件号的CLOSE关闭所有打开的文件，目前在BB中尚未支持这个功能。

    3、PUT

    功能：向一个打开的文件中写入数据

    语法：PUT #文件号,常量或变量

    说明：#文件号就是OPEN中设置的文件号

    4、GET

    功能：从一个打开的文件中读取数据

    语法：GET #文件号,变量名

    说明：#文件号就是OPEN中设置的文件号

　

三、文件操作函数

    1、EOF(fnum)

    功能：判断文件指针是否已到文件结束位置

    语法：EOF(文件号)

    说明：文件号就是在OPEN语句中指定的文件号。

    2、LOF(fnum)

    功能：获取文件的字节长度。

    语法：LOF(文件号)

    说明：文件号就是在OPEN语句中指定的文件号。

    3、LOC(fnum)

    功能：获取文件指针的当前位置。

    语法：LOC(文件号)

    说明：文件号就是在OPEN语句中指定的文件号。

　

四、一个例子

    比如一个小游戏，要把玩家的名字和分数存储到“demo.sav”这个文件中。玩家的名字在g_Name$中，而玩家的分数在g_Score里。如下：

    OPEN "demo.sav" FOR BINARY AS #1        '打开文件

    PUT #1,g_Name$        '写入玩家姓名

    PUT #1,g_Score        '写入玩家分数

    CLOSE #1              '关闭文件

　

    要从已经存储好的文件中读取出数据，也很简单。就是把上边的PUT该成GET即可。例如下次玩家又进入了游戏，想接着上面的记录玩，就可以从文件中把保存的数据读取出来。如下：

    OPEN "demo.sav" FOR BINARY AS #1        '打开文件

    GET #1,g_Name$        '读取玩家姓名，放入变量g_Name$中

    GET #1,g_Score        '读取玩家分数，放入变量g_Score中

    CLOSE #1              '关闭文件




第十章：图形编程


--------------------------------------------------------------------------------

    以前的QB是出现在DOS时代的，当时文本界面横行。自从苹果系统将人们带入了GUI界面世界后，人们已经不习惯单调无趣文本界面了。QB对图形图象的支持是有限的，我们在设计BB时，对图形图象这一部分，进行了很大的改进，使得它对图形图象的支持已经足够的强大了。大家可以从BB附带的RPG游戏《幻兽战记》就可以体验到。

    另外，由于BB是跨平台的程序设计语言。为了解决各平台之间图形图象的匹配问题，BB中将以rlb的文件方式管理图形图象。下面就让我一步步带你走进BB的图形世界。

一、图形编程的基础知识

    页面：看过BB程序的人也许都已经发现，BB中大部分的绘图贴图函数，都是针对页面进行的。这里我给大家解释一下页面的概念。页面就是一个和屏幕完全兼容的幕后屏幕，当在页面上进行相关的操作，直到将这个幕后屏幕的内容显示到屏幕上前，是看不到效果的。

    颜色：计算机中的颜色，是根据R、G、B三原色进行不同的搭配，来形成24位色彩的。那么由于BB可以支持彩色的模拟器，所以在BB中使用的颜色就是标准的计算机24位彩色。大家也许会被那些&HFFFFFF,&H000000等搞晕头。但这些其实并步重要。你完全可以像《幻兽战记》那样，使用CONST将这些值定义成一个有意义的符号，以后使用这些符号就可以了。有人根据词典只有4种灰度，建议我将BB中的颜色使用0，1，2，3四个数值代替。我本来也想这么做，但BB是跨平台的编程语言，这样就限制了它对其他平台，比如黑白或彩色机的支持了。所以抱歉，我们不能这么做。

    资源管理：上面已经说了，为了匹配不同平台之间的图象格式，我们采用的图象资源管理方式是使用rlb文件进行管理的。这样大家写BB程序时，就不必关注不同平台之间的图象格式的不匹配问题。只要BB虚拟机兼容到了其他平台，你的程序也就可用在该平台上运行了。唯一可能要做的调整，就是不同平台之间屏幕大小的不同。不过若你设计的程序是在最小屏幕的机器上使用的，那么就连屏幕的兼容，你也不需要做了。RLB文件是由tool目录下ResMake.exe工具生成的。下面看看具体如何生成RLB。

    RLB文件的生成：由于这个很重要，是所有图形编程的基础。这里我使用step by step，图文并茂的方式来讲解。请大家仔细看。

    第一步：打开工具ResMake.exe，工具在BB语言的tool目录下。如下图中被选定的文件。

    

    第二步：将把程序中要使用的图片添加到工具中。详细的操作步骤看下面几幅图片。

    选中资源菜单项中的添加项，快捷键A

    弹出选择文件的对话框，选中你要添加的图片，并点击打开

    

    被选中的图片文件即添加到了工具中。

    第三步：重复以上动作，直到将所有要使用的图片都添加到工具中后。选择文件菜单中的保存即可，如下图。

    

    在弹出的保存文件对话框中为你的rlb文件起各名字即可。

　

二、资源管理函数

    1、LOADRES(FILE$,ID)

    功能：从指定的rlb文件中载入图象资源。

    语法：pic = LOADRES(资源库文件名,资源ID)

    说明：资源库是由上面步骤生成的RLB文件，到具体的词典机型上时，可以使用由工具转换而成的lib文件。资源ID就是在工具界面中文件名前面的数字。例如这里的数字1就是bootpic.bmp的资源ID。

    2、FREERES(PIC)

    功能： 释放通过LOADRES函数载入的资源。

    语法：FREERES(pic)

    说明：pic就是通过LOADRES函数载入的资源。

    3、GETPICWID(PIC)

        功能：获取指定资源的象素宽度

    语法：GETPICWID(pic)

    说明：pic就是通过LOADRES函数载入的资源。

    4、GETPICHGT(PIC)

        功能：获取指定资源的象素高度

    语法：GETPICHGT(pic)

    说明：pic就是通过LOADRES函数载入的资源。


三、图形编程接口函数

    1、CREATEPAGE()

    功能：创建一个和屏幕兼容的页面

    语法：page = CREATEPAGE()

    说明：page为一个整型变量。用来存放返回的页面。

    2、DELETEPAGE(PAGE)

    功能：删除指定的页面

    语法：DELETEPAGE(page)

    说明：page就是由CREATEPAGE函数创建的页面。

    3、SHOWPIC(PAGE,PIC,DX,DY,W,H,X,Y,MODE)

    功能：显示指定的图象资源到指定的页面。

    语法：SHOWPIC(PAGE,PIC,DX,DY,W,H,X,Y,MODE)

    说明：page就是由CREATEPAGE函数创建的页面。当page=-1时，图片将直接显示到前台屏幕上。

        pic是由LOADRES函数载入的资源。

        DX,DY是要把图片显示到的屏幕坐标。

        W,H是要显示的高度和宽度。

        X,Y是从图片中开始显示的坐标。

        MODE为显示模式，目前只支持1，为透明模式。若图片使用了关键颜色，则关键颜色就呈透明显示。关键颜色为RGB=255,0,255的紫色。

    4、FLIPPAGE(PAGE)

    功能：将页面中的内容映射到屏幕上。

    语法：FLIPPAGE(page)

    说明：幕后的屏幕内容要显示到前台屏幕上，必须通过这个函数来实现。

    5、BITBLTPAGE(DEST,SRC)

    功能：页面对拷。

    语法：BITBLTPAGE(page1,page2)

    说明：将page2中的内容显示映射到page1中。

    6、STRETCHBLTPAGE(X,Y,DEST,SRC)

    功能：页面对拷(增强)。

    语法：STRETCHBLTPAGE(x,y,page1,page2)

    说明：将page2中的内容显示映射到page1中。page2从0,0开始的位置映射，映射到page1中的位置由x,y给出。

    7、FILLPAGE(PAGE,X,Y,WID,HGT,COLOR)

    功能：用指定的颜色填充页面。

    语法：FILLPAGE(PAGE,X,Y,WID,HGT,COLOR)

    说明：page为指定的页面。当page=-1时，将直接填充前台屏幕。

          x,y,wid,hgt指定了填充的区域坐标和宽度高度。

          color为标准的24位RGB颜色值。

    9、PIXEL(PAGE,X,Y,COLOR)

    功能：像指定的页面画点。

    语法：PIXEL(PAGE,X,Y,COLOR)

    说明：page为指定的页面。当page=-1时，将直接画到前台屏幕上。

          x,y给出了点的屏幕象素坐标。

          color为标准的24位RGB颜色值。

    10、READPIXEL(PAGE,X,Y)

    功能：读取指定页面上一点的颜色值。

    语法：color = READPIXEL(PAGE,X,Y)

    说明：page为指定的页面。当page=-1时，将直接从前台屏幕上读取。

          x,y给出了点的屏幕象素坐标。

          返回的color为标准的24位RGB颜色值。

    11、COLOR(FRONT,BACK,FRAME)

    功能：设置屏幕上的字体颜色，字体背景颜色和边框颜色

    语法：COLOR(FRONT,BACK,FRAME)

    说明：由于这个函数是和print语句搭配使用的，而print只能将内容显示到前台屏幕上。所以这里没有page参数。

          front为要设置的字体颜色，值为标准的24位RGB颜色值。

          back为要设置的字体背景颜色，值为标准的24位RGB颜色值。

          frame为要设置的边框颜色，值为标准的24位RGB颜色值。由于目前每提供创建子窗口的window指令，所以这个参数并无实际意义。

    12、FONT(F)

    详见这里

    13、SETBKMODE(mode)

    功能：设置字体是否透明显示

    语法：SETBKMODE(mode)

    说明：mode的取值，可以为：TRANSPARENT或OPAQUE，这两个值在stdlib.lib文件中一定预定义好了。

          TRANSPARENT为透明显示，即字体的背景颜色无效。

          OPAQUE为不透明显示，即字体的背景颜色有效。

    14、PIXLOCATE(LINE,ROW)

    详见这里

　

